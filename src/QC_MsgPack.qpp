/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  QC_MsgPack.qpp

  Qore MessagePack module

  Copyright (C) 2018 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

// qore
#include "qore/Qore.h"

// module sources
#include "msgpack_enums.h"
#include "MsgPack.h"
#include "QC_MsgPackExtension.h"

using msgpack::MSGPACK_SIMPLE_MODE;

//! MessagePack packing and unpacking class.
/** MessagePack module packing and unpacking class.
 */
qclass MsgPack [arg=msgpack::MsgPack* mp; ns=msgpack; flags=final];

//! Creates the MsgPack object.
/**
    @param mode MsgPack module operation mode

    @throw INVALID-MODE passed operation mode is invalid
 */
MsgPack::constructor(int mode = MSGPACK_SIMPLE_MODE) {
    if (msgpack::checkOperationMode(xsink, mode))
        return;
    msgpack::OperationMode m = static_cast<msgpack::OperationMode>(mode);
    self->setPrivate(CID_MSGPACK, new msgpack::MsgPack(m));
}

//! Get module operation mode.
/**
    @return MsgPack module operation mode
 */
int MsgPack::getOperationMode() {
    return QoreValue(static_cast<int64>(mp->getOperationMode()));
}

//! Set operation mode.
/**
    @param mode MsgPack module operation mode

    @throw INVALID-MODE passed operation mode is invalid
 */
nothing MsgPack::setOperationMode(int mode) {
    if (msgpack::checkOperationMode(xsink, mode))
        return QoreValue();
    mp->setOperationMode(static_cast<msgpack::OperationMode>(mode));
}

//! Pack the passed data.
/**
    @param value value to pack
    @return packed MessagePack data
 */
*binary MsgPack::pack(auto value) {
    return mp->pack(xsink, value);
}

//! Unpack the passed data.
/**
    @param value data to unpack
    @return unpacked Qore value
 */
auto MsgPack::unpack(binary value) {
    return mp->unpack(xsink, value);
}